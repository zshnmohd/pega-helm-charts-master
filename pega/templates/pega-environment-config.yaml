# Config map used for common configuration between Pega nodes
{{ if (eq (include "performDeployment" .) "true") }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "pegaEnvironmentConfig" $ }}
  namespace: {{ .Release.Namespace }}
  labels:
    ops.identifier: "infinity"
data:
  # Database Type for installation
  DB_TYPE: {{ .Values.global.jdbc.dbType }}
  # JDBC URL of the DB where Pega is installed
  JDBC_URL: {{ .Values.global.jdbc.url }}
{{- if .Values.global.jdbc.readerurl }}
  # JDBC URL to configure Read Only Datasource
  JDBC_RO_URL: {{ .Values.global.jdbc.readerurl }}
{{- end }}
  # Class name of the DB's JDBC driver
  JDBC_CLASS: {{ .Values.global.jdbc.driverClass }}
{{- if .Values.global.jdbc.driverUri }}
  # URI that the JDBC driver can be downloaded from
  JDBC_DRIVER_URI: {{ .Values.global.jdbc.driverUri }}
{{- end }}
{{- if .Values.global.jdbc.connectionProperties }}
  # The connection properties that will be sent to our JDBC driver when establishing new connections
  JDBC_CONNECTION_PROPERTIES: {{ .Values.global.jdbc.connectionProperties }}
{{- end }}
  # Rules schema of the Pega installation
{{ if (eq (include "performUpgradeAndDeployment" .) "true") }}
  RULES_SCHEMA: {{ .Values.installer.upgrade.targetRulesSchema }}
{{ else }}
  RULES_SCHEMA: {{ .Values.global.jdbc.rulesSchema }}
{{ end }}
  # Data schema of the Pega installation
  DATA_SCHEMA: {{ .Values.global.jdbc.dataSchema }}
{{- if .Values.global.jdbc.customerDataSchema }}
  # CustomerData schema of the Pega installation
  CUSTOMERDATA_SCHEMA: {{ .Values.global.jdbc.customerDataSchema }}
{{- end }}
{{- if .Values.pegasearch.externalSearchService }}
  # Search deployment type so that the engine knows to connect to the search service
  PEGA_SEARCH_TYPE: "ExternalSearchService" 
  # URL to connect to Search and Reporting service
  SEARCH_AND_REPORTING_SERVICE_URL: {{ include "pegaSearchURL" $ }}
{{- else }}
  # URL to connect to Elastic Search
  PEGA_SEARCH_URL: {{ include "pegaSearchURL" $ }}
{{- end }}
  # Whether to enable connecting to a cassandra cluster.  "true" for enabled, "false for disabled"
  CASSANDRA_CLUSTER: "{{ include "cassandraEnabled" . }}"
  # Comma separated list of cassandra hosts
  CASSANDRA_NODES: "{{ include "cassandraNodes" . }}"
  # Port to connect to cassandra with
  CASSANDRA_PORT: "{{ .Values.dds.port }}"
  # Whether to enable client encryption on the Cassandra connection
  CASSANDRA_CLIENT_ENCRYPTION: "{{ .Values.dds.clientEncryption }}"
  # Path to a mounted trust store file for Cassandra encryption
  CASSANDRA_TRUSTSTORE: "{{ .Values.dds.trustStore }}"
  # Path to a mounted key store file for Cassandra encryption
  CASSANDRA_KEYSTORE: "{{ .Values.dds.keyStore }}"
  # Unique ID for multitenant backing services
  CUSTOMER_DEPLOYMENT_ID: "{{ include "customerDeploymentID" . }}"
{{- if .Values.stream }}
{{- if .Values.stream.url }}
  PEGA_STREAM_URL: {{ .Values.stream.url }}
{{- end }}
{{- end }}
{{ if .Values.hazelcast.enabled }}
  HZ_DISCOVERY_K8S: "true"
  HZ_CLIENT_MODE: "true"
{{ if .Values.hazelcast.client.clusterName }}
  # Hazelcast Cluster Name
  HZ_CLUSTER_NAME: {{ .Values.hazelcast.client.clusterName }}
{{- end }}
  # Hostname of Hazelcast server
  HZ_SERVER_HOSTNAME: {{ template "hazelcastName" . }}-service.{{ .Release.Namespace }}.svc.cluster.local
{{- end }}
  # enable ssl verification for jdbc driver download
  ENABLE_CUSTOM_ARTIFACTORY_SSL_VERIFICATION: "{{ .Values.global.customArtifactory.enableSSLVerification }}"
{{ if .Values.stream.enabled }}
  # Whether to enable connecting to an external stream cluster.  "true" for enabled, "false for disabled"
  EXTERNAL_STREAM: "true"
  # Provided bootstrap server
  STREAM_BOOTSTRAP_SERVERS: "{{ .Values.stream.bootstrapServer }}"
  STREAM_SECURITY_PROTOCOL: "{{ .Values.stream.securityProtocol }}"
  STREAM_SASL_MECHANISM: "{{ .Values.stream.saslMechanism }}"
  # Path to a mounted trust store file for Stream encryption
  {{- if .Values.stream.trustStore }}
  STREAM_TRUSTSTORE: "/opt/pega/certs/{{ .Values.stream.trustStore }}"
  {{- end }}
  # Only JKS type certificates are supported
  STREAM_TRUSTSTORE_TYPE: "{{ .Values.stream.trustStoreType }}"
  # Path to a mounted key store file for Stream encryption
  {{- if .Values.stream.keyStore }}
  STREAM_KEYSTORE: "/opt/pega/certs/{{ .Values.stream.keyStore }}"
  {{- end }}
  # Only jks type certificates are supported
  STREAM_KEYSTORE_TYPE: "{{ .Values.stream.keyStoreType }}"
  STREAM_NAME_PATTERN: "{{ .Values.stream.streamNamePattern }}"
  STREAM_REPLICATION_FACTOR: "{{ .Values.stream.replicationFactor }}"
{{- end }}
{{ end }}
